# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.

class UnitDied(Exception):
    pass

class UnitDied(Exception):
    pass

class Unit():
    def __init__(self, coord, hp):
        self.coord = coord
        self.hp = hp  # —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∏—Ç-–ø–æ–∏–Ω—Ç–æ–≤
        self.got_key = False #–Ω–∞–ª–∏—á–∏–µ —É —é–Ω–∏—Ç–∞ –∫–ª—é—á–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏ –≤ –∫–æ–Ω—Ü–µ —É—Ä–æ–≤–Ω—è
        self.escaped = False #—Ñ–ª–∞–≥, –≥–æ–≤–æ—Ä—è—â–∏–π –æ —Ç–æ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ —Å–±–µ–∂–∞—Ç—å –∏–∑ –ø–æ–¥–∑–µ–º–µ–ª—å—è

    def has_position (self,coord): # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ —ç—Ç–∏—Ö –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —é–Ω–∏—Ç (bool)
        return self.coord == coord

    def set_position(self,coord): # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —é–Ω–∏—Ç–∞
        self.coord = coord

    def get_position(self): #hero.get_position(x,y)  # –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂
        return self.coord

    def get_damage(self, damage):
        self.hp -= damage

    def get_hp(self):
        return int(self.hp)

    def set_hp(self, new_value):
        self.hp = new_value

    def has_key(self): #- –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—Å—Ç—å –ª–∏ –∫–ª—é—á(bool)
        return self.got_key

    def set_key(self):
        print('You have the key!')
        self.got_key = True

    def set_escaped(self):
        self.escaped = True

    def has_escaped(self): #–ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–¥–∞–ª–æ—Å—å –ª–∏ —Å–±–µ–∂–∞—Ç—å (bool)
        return self.escaped

    def is_alive(self): #–ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –µ—â–µ —É —é–Ω–∏—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–∏—Ç-–ø–æ–∏–Ω—Ç–æ–≤
        if self.hp <= 0:
            print('You are lost!')
            raise UnitDied(f'Game Over!')
        return True

    def get_damage(self, damage): #–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞—â–∏—Ç—ã
        print(f'Damage - {damage}')
        self.hp -= damage
        self.is_alive()

class Ghost(Unit):
    def __init__(self, coord, hp):
        super().__init__(coord, hp)
        self.name = 'Ghost'

class Terrain():
    def __init__(self,walkable,terrain):
        self.walkable = walkable  # –º–æ–∂–Ω–æ –ª–∏ —é–Ω–∏—Ç—É –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç
        self.terrain = terrain # –∏–º—è

    def step_on(self,unit): #–≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ Unit
        pass

    def is_walkable(self): #–≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Ñ–ª–∞–≥ –æ "–ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏" –æ–±—ä–µ–∫—Ç–∞
        #if self.walkable: print('–ü–æ–ª–µ –ø—Ä–æ—Ö–æ–¥–∏–º–æ–µ')
        #else: print('–ü–æ–ª–µ –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º–æ–µ')
        return self.walkable

    def get_terrain(self): #–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –æ–±—ä–µ–∫—Ç–∞
        return self.terrain

class Door(Terrain):
    def __init__(self):
        super().__init__(True, 'Door')

    def step_on(self,unit):
        '''–∫–æ–≥–¥–∞ —é–Ω–∏—Ç –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–∞ –¥–≤–µ—Ä—å, –µ—Å–ª–∏ —É —é–Ω–∏—Ç–∞ –µ—Å—Ç—å –∫–ª—é—á,
        —Ç–æ –¥–ª—è —é–Ω–∏—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ escaped'''
        if unit.has_key(): unit.set_escaped()

class Key(Terrain):
    def __init__(self):
        super().__init__(True, 'Key')

    def step_on(self,unit):
        '''–¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å —é–Ω–∏—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –∫–ª—é—á,
        —ç—Ç–æ—Ç —Å–∞–º—ã–π –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∫–ª—é—á–∞ has_key —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥'''
        unit.set_key()

class Trap(Terrain):
    def __init__(self,damage):
        super().__init__(True, 'Trap')
        self.damage = damage

    def step_on(self,unit):
        unit.get_damage(self.damage)

class Grass(Terrain):
    def __init__(self):
        super().__init__(True,'Grass')

class Wall(Terrain):
    def __init__(self):
        super().__init__(False, 'Wall')

class Cell():
    def __init__(self,obj):
        self.obj = obj

    def get_obj(self):
        return self.obj

class Field():
    def __init__(self,unit,field):
        self.unit = unit
        self.field = field

        self.rows = len(field) #int, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ø–æ–ª–µ
        self.cols = len(field[0])  # int, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø–æ–ª–µ

        # self.field = [] #list, –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
        # for i in range(self.rows):
        #     self.field.append([])
        #     for j in range(self.cols):
        #         if i == 0 or j == 0 or i == self.rows-1 or j == self.cols-1:
        #             self.field[-1].append(Cell(Wall()))
        #         else:
        #             self.field[-1].append(Cell(Grass()))

    def get_field(self): #–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ field
        return self.field

    def get_cols(self):
        return self.cols

    def get_rows(self):
        return self.rows

    def cell(self,coord): #–≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –ø–æ –¥–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        return self.field[coord[0]][coord[1]].get_obj() #!!! —Ç–µ—Å—Ç–∏—Ç—å

    def move_unit_up(self,unit):
        p = unit.get_position()
        pn = (p[0]-1,p[1])
        if self.cell(pn).is_walkable():
            unit.set_position(pn)

    def move_unit_down(self, unit):
        p = unit.get_position()
        pn = (p[0]+1,p[1])
        if self.cell(pn).is_walkable():
            unit.set_position(pn)


    def move_unit_right(self, unit):
        p = unit.get_position()
        pn = (p[0],p[1]+1)
        if self.cell(pn).is_walkable():
            unit.set_position(pn)

    def move_unit_left(self, unit):
        p = unit.get_position()
        pn = (p[0],p[1]-1)
        if self.cell(pn).is_walkable():
            unit.set_position(pn)


class GameController():
    def __init__(self, hero, field):
        self.game_on = True #–º–∞—Ä–∫–µ—Ä, —Å–æ–æ–±—â–∞—é—â–∏–π —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã—Ä–∞–∑–∏–ª –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∏–≥—Ä—É
        self.hero = hero
        self.field = field
        self.mapping = {
            'Wall': 'üî≤',
            'Grass': '‚¨ú',
            'Ghost': 'üëª',
            'Key': 'üóù',
            'Door': 'üö™',
            'Trap': 'üíÄ',
        }

    def make_field(self):
        drawings = [[aaa.get_obj().terrain for aaa in aa] for aa in self.field.get_field()]
        p = self.hero.get_position()
        drawings[p[0]][p[1]] = self.hero.name
        for aa in drawings: print(' '.join([self.mapping[aaa] for aaa in aa]))


    def play(self):
        prompt = "\nPlease print 'w' or 's' or 'a' or 'd'"
        prompt += "\nEnter 'stop' to end the program. "
        while self.game_on:

            message = input(prompt)
            if message == 'stop':
                self.game_on = False
            else:
                try:
                    if message == 'w': self.field.move_unit_up(self.hero) #–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —é–Ω–∏—Ç–∞
                    if message == 's': self.field.move_unit_down(self.hero)
                    if message == 'a': self.field.move_unit_left(self.hero)
                    if message == 'd': self.field.move_unit_right(self.hero)

                    self.field.cell(self.hero.get_position()).step_on(self.hero)  # –æ–±—ä–µ–∫—Ç (terrain) –≥–¥–µ —é–Ω–∏—Ç -> step on

                    #if self.hero.has_key() == True: print('You have the key!')
                    if self.hero.has_escaped():
                        print('You are win!')
                        self.game_on = False
                        break

                    self.make_field()
                except UnitDied:
                    print('Game Over!')
                    break
                    #sys.exit()



# Press the green button in the gutter to run the script.
if __name__ == '__main__':

    #—Ñ–æ—Ä–º–∏—Ä—É—é –≤—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤ —Å –ø–æ–ª–µ–º
    #–Ω–∞–≤–µ—Ä–Ω–æ–µ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –µ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∞—Å—Å–∞
    I,J = 7,8
    field_list = []
    for i in range(I):
        field_list.append([])
        for j in range(J):
            if i == 0 or j == 0 or i == I - 1 or j == J - 1:
                field_list[-1].append(Cell(Wall()))
            else:
                field_list[-1].append(Cell(Grass()))

    field_list[I-1][J-2] = Cell(Door())
    field_list[2][3] = Cell(Trap(30))
    field_list[5][5] = Cell(Trap(30))
    field_list[3][3] = Cell(Key())

    ghost = Ghost((1, 1), 50)
    field = Field(ghost,field_list)

    gamecontroller = GameController(ghost,field)
    gamecontroller.make_field()
    gamecontroller.play()

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
